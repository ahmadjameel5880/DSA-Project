#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

// Structure to represent a graph edge
struct Edge {
    int dest;
    int weight;
};

// Structure to represent a graph node
struct Node {
    int id;
    vector<Edge> neighbors;
};

// Function to add an edge to the graph
void addEdge(vector<Node>& graph, int src, int dest, int weight) {
    Edge newEdge = {dest, weight};
    graph[src].neighbors.push_back(newEdge);
}

// Dijkstra's Algorithm to find shortest path from source to all nodes
void dijkstra(vector<Node>& graph, int source) {
    vector<int> dist(graph.size(), INT_MAX);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    dist[source] = 0;
    pq.push({0, source});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        for (const Edge& edge : graph[u].neighbors) {
            int v = edge.dest;
            int weight = edge.weight;

            if (dist[v] > dist[u] + weight) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v], v});
            }
        }
    }

    // Output the shortest distances from source to all nodes
    cout << "Shortest distances from source " << source << ":\n";
    for (int i = 0; i < dist.size(); ++i) {
        cout << "Node " << i << ": " << dist[i] << endl;
    }
}

// Bellman-Ford Algorithm to find shortest path from source to all nodes
bool bellmanFord(vector<Node>& graph, int source) {
    vector<int> dist(graph.size(), INT_MAX);
    dist[source] = 0;

    for (int i = 0; i < graph.size() - 1; ++i) {
        for (int u = 0; u < graph.size(); ++u) {
            for (const Edge& edge : graph[u].neighbors) {
                int v = edge.dest;
                int weight = edge.weight;

                if (dist[u] != INT_MAX && dist[v] > dist[u] + weight) {
                    dist[v] = dist[u] + weight;
                }
            }
        }
    }

    // Check for negative weight cycles
    for (int u = 0; u < graph.size(); ++u) {
        for (const Edge& edge : graph[u].neighbors) {
            int v = edge.dest;
            int weight = edge.weight;

            if (dist[u] != INT_MAX && dist[v] > dist[u] + weight) {
                return false; // Negative weight cycle found
            }
        }
    }

    // Output the shortest distances from source to all nodes
    cout << "Shortest distances from source " << source << ":\n";
    for (int i = 0; i < dist.size(); ++i) {
        cout << "Node " << i << ": " << dist[i] << endl;
    }

    return true;
}

int main() {
    // Create the graph
    int numNodes = 5;
    vector<Node> graph(numNodes);

    // Add edges to the graph
    addEdge(graph, 0, 1, 10);
    addEdge(graph, 0, 2, 5);
    addEdge(graph, 1, 3, 1);
    addEdge(graph, 2, 1, 3);
    addEdge(graph, 2, 3, 8);
    addEdge(graph, 2, 4, 2);
    addEdge(graph, 3, 4, 4);
    addEdge(graph, 4, 3, 6);

    // Test Dijkstra's Algorithm
    dijkstra(graph, 0);

    // Test Bellman-Ford Algorithm
    if (bellmanFord(graph, 0)) {
        cout << "No negative weight cycle found.\n";
    } else {
        cout << "Negative weight cycle detected!\n";
    }

    return 0;
}
